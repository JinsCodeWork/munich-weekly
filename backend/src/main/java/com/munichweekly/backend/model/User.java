package com.munichweekly.backend.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity // Indicates this is a JPA entity class, mapped to a database table
@Table(name = "users") // Maps to the users table in PostgreSQL database
public class User {

    @Id // Primary key identifier
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-generate primary key ID
    private Long id;

    @Column(unique = true) // Email is unique to prevent duplicate registration
    private String email;

    private String nickname;

    private String avatarUrl;

    @Column()
    private String role = "user"; // Default role is regular user

    private LocalDateTime registeredAt = LocalDateTime.now();

    private Boolean isBanned = false;

    private String password; // Password used for email-based login


    // No-argument constructor (required by JPA specification)
    public User() {}

    // Full-argument constructor (convenient for creating user instances)
    public User(String email, String password, String nickname, String avatarUrl, String role) {
        this.email = email;
        this.nickname = nickname;
        this.password = password;
        this.avatarUrl = avatarUrl;
        this.role = role;
        this.registeredAt = LocalDateTime.now();
        this.isBanned = false;
    }

    // Getter and setter methods (auto-generated by IDE)
    public Long getId() {
        return id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public LocalDateTime getRegisteredAt() {
        return registeredAt;
    }

    public void setRegisteredAt(LocalDateTime registeredAt) {
        this.registeredAt = registeredAt;
    }

    public Boolean getIsBanned() {
        return isBanned;
    }

    public void setIsBanned(Boolean banned) {
        isBanned = banned;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}