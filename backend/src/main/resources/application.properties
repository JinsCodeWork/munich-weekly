spring.application.name=backend
# Storage configuration - set to 'R2' for cloud storage, or 'LOCAL' for local storage
storage.mode=R2

spring.datasource.url=jdbc:postgresql://postgres:5432/mydatabase
spring.datasource.username=myuser
spring.datasource.password=secret

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.connection-test-query=SELECT 1
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

jwt.secret=${JWT_SECRET:this-is-a-very-secret-key-123456789077883932032328}
jwt.expirationMs=${JWT_EXPIRATION_MS:3600000}

# File upload configuration
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB
spring.servlet.multipart.enabled=true

# Upload directory configuration - using relative path to project root
uploads.directory=${UPLOADS_DIR:./uploads}

# Cloudflare R2 configuration (used in production profile)
cloudflare.r2.access-key=${CLOUDFLARE_R2_ACCESS_KEY:}
cloudflare.r2.secret-key=${CLOUDFLARE_R2_SECRET_KEY:}
cloudflare.r2.endpoint=${CLOUDFLARE_R2_ENDPOINT:}
cloudflare.r2.bucket=${CLOUDFLARE_R2_BUCKET:munichweekly-photoupload}
cloudflare.r2.public-url=${CLOUDFLARE_R2_PUBLIC_URL:}

# Mailjet
mailjet.api.key=${MAILJET_API_KEY:}
mailjet.api.secret=${MAILJET_API_SECRET:}
app.frontend.url=${APP_FRONTEND_URL:https://munichweekly.art}